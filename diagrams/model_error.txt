@startuml
actor User as user
participant "view:instructors/show.html" as u_show
participant "view:instructors/edit.html" as edit
participant "controller:instructors_controller.rb" as contr
participant "model:instructor.rb" as model
participant "ActiveRecord" as active_rec
database "DB" as db

activate user
user -> u_show : Open show.html
activate u_show
u_show --> user : Display entity
deactivate u_show

user -> u_show : Click "Edit" button
activate u_show

u_show -> contr : GET /instructors/:id/edit
deactivate u_show
activate contr

contr -> model : Instructor.find(params[:id])
activate model

model -> db : SELECT "instructors".* FROM "instructors"\nWHERE "instructors"."id" = id
activate db

db --> model : Result record
deactivate db

model --> contr : Instructor
deactivate model

contr --> edit : Populate @instructor variable
deactivate contr

activate edit
edit --> user : Display instructor

user -> edit : Click "Update Instructor" button
edit -> contr : PATCH /instructor/:id
deactivate edit
activate contr

contr -> model : @instructor.update(instructor_params)
activate model

model -> model : validates :email, :presence\n:uniqueness, :format

model -> db : UPDATE "clients" SET "email" = "phil_th@mail.ru"\nWHERE "clients"."id" = id
activate db

deactivate model
db --> active_rec : Unique violation
deactivate db

activate active_rec
active_rec -> active_rec : _translate_exception
active_rec --> contr : ActiveRecord:RecordNotUnique
deactivate active_rec

contr -> contr : rescue_unique_ex
contr --> u_show : populate @error_message
deactivate contr

activate u_show
u_show --> user : Display error message


deactivate u_show
deactivate user

@enduml
